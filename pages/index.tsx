import Head from "next/head";
import {Inter} from "next/font/google";
import styles from "@/styles/Home.module.css";
import type {GetStaticPropsContext, InferGetStaticPropsType} from "next";
import Image from "next/image";
import qs from "qs";
import type {Media, Page} from "@/payload-types";

const inter = Inter({subsets: ["latin"]});

export const getStaticProps = async (context: GetStaticPropsContext) => {
  const fallbackLocale = context.defaultLocale || "en";
  const locale = context.locale || fallbackLocale;

  const query = qs.stringify(
    {
      where: {slug: {equals: "home"}},
      locale,
      limit: 1,
      depth: 4,
      'fallback-locale': fallbackLocale,
    },
    {addQueryPrefix: true, encodeValuesOnly: true}
  );

  const cmsUrl = process.env.CMS_URL_LOCAL;
  if (!cmsUrl) throw new Error("CMS_URL_LOCAL not set in environment");

  const resp = await fetch(`${cmsUrl}/api/pages${query}`, {
    method: "GET",
    headers: {
      "Accept": "application/json",
      "Content-Type": "application/json",
    },
  });
  if (resp.status !== 200) throw new Error(`Failed to fetch: ${resp.status} - ${resp.statusText}`);

  const data = await resp.json();
  const page: Page = data.docs[0];

  return {
    props: {
      title: page.title,
      image: page.image as Media,
      imageAlt: page.imageAlt,
      contentDir: page.content.root.direction,
      content: page.content_html,
    },
  };
}

export default function Home(
  {
    title,
    image,
    imageAlt,
    contentDir,
    content
  }: InferGetStaticPropsType<typeof getStaticProps>) {
  return (
    <>
      <Head>
        <title dir={contentDir!}>{title}</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>

      <main dir={contentDir!} className={`${styles.main} ${inter.className}`}>
        <h1>{title}</h1>
        <Image
          src={`http://localhost:8000${image.url}`}
          alt={imageAlt}
          width={image.width ?? 300}
          height={image.height ?? 300}
          priority
          style={{height: "auto", width: "300px"}}
        />
        <div dangerouslySetInnerHTML={{__html: content!}}/>
      </main>
    </>
  );
}
